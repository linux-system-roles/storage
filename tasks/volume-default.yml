---

# TODO: Argument validation.
#
# TODO: Set defaults as needed: lvm_vg, device_name, disks
#
- set_fact:
    volume: "{{ volume_defaults|combine(volume_internal, raw_volume) }}"

- debug:
    var: volume

#
# Resolve specified disks to device node paths.
#
- name: Resolve disks
  resolve_blockdev:
    spec: "{{ item }}"
  with_items: "{{ volume.disks }}"
  register: resolved_disks
  when: volume.disks is defined and volume.type != "lvm"

- debug:
    var: resolved_disks
  when: volume.type != "lvm" and volume.disks is defined

- name: set list of resolved disk paths
  set_fact:
    volume: "{{ volume|combine({'disks': resolved_disks.results|map(attribute='device')|list}) }}"
  when: volume.type != "lvm" and volume.disks is defined

#
# Set the path for the final device based on device type.
#
- name: set final device path for whole disk
  set_fact:
    volume: "{{ volume|combine({'_device': volume.disks[0] }) }}"
  when: volume.type == "disk"

- name: set final device path for partition
  set_fact:
    volume: "{{ volume|combine({'_device': volume.disks[0]+'1'}) }}"
  when: volume.type == "partition"

- debug:
    var: volume

- name: set final device path for lv
  set_fact:
    volume: "{{ volume|combine({'_device': '/dev/mapper/'+pool.name+'-'+volume.name}) }}"
  when: volume.type == "lvm"

- name: stat the final device file
  include_tasks: stat_device.yml

- set_fact:
    volume: "{{ volume|combine({'_preexist': device_status.stat.exists}) }}"

#
# Store Initial fs_type, mount_point
#
- block:
  - name: find current fs type
    command: blkid -s TYPE -o value {{ volume._device }}
    register: blkid_type
    changed_when: false
  - name: save current fs type
    set_fact:
      volume: "{{ volume|combine({'_orig_fs_type': blkid_type.stdout|default('')|trim}, recursive=True) }}"
  rescue:
    - debug:
        msg: "failed to find existing fs type"
  when: volume._preexist

- set_fact:
    volume: "{{ volume|combine({'_orig_mount_point': ansible_facts.mounts|selectattr('device', 'eq', volume._device)|map(attribute='mount')|list|first|default('')}, recursive=True) }}"

- set_fact:
    volume: "{{ volume|combine({'_wipe': volume._preexist and (not volume.fs_type or (volume._orig_fs_type and volume.fs_type != volume._orig_fs_type))}) }}"

- set_fact:
    volume: "{{ volume|combine({'_remove': volume.state == 'absent' or (pool is not defined or (pool.state is defined and pool.state == 'absent'))}) }}"

- set_fact:
    volume: "{{ volume|combine({'_create': volume.state == 'present' and (pool is not defined or (pool.state is not defined or pool.state == 'present'))}) }}"

- name: parse the specified size
  bsize:
    size: "{{ volume.size }}"
  register: size
  when: volume.type != "disk"

- block:
  - name: set up partition parameters
    set_fact:
      part_info: "{{ part_defaults|combine({'disk': volume.disks[0],
                                            'name': volume.name,
                                            'size': volume.size,
                                            'state': volume.state}) }}"
  when: volume.type == "partition"

- name: Use the ext4 file system when distribution is RHEL 6 (and xfs was not specified)
  set_fact:
    volume: "{{ volume|combine({'fs_type': 'ext4'}) }}"
  when:
    - raw_volume.fs_type is undefined
    - ansible_distribution == 'RedHat'
    - ansible_distribution_major_version == '6'

- name: Append volume state info to storage_volumes_list
  set_fact:
    _storage_volumes_list: "{{ _storage_volumes_list + [volume] }}"
  when: volume.type == 'partition' or volume.type == 'disk'

- name: Manage the Specified Volume
  include_tasks: "{{ layer }}-{{ storage_backend }}.yml"
  loop: "{{ volume_layers if volume._create else volume_layers[::-1] }}"
  loop_control:
    loop_var: layer
  when: volume

- debug:
    msg: "Done with {{ volume.name }}"

- set_fact:
    volume: null
    part_info: null

#
# Update facts since we may have changed system state.
#
# Should this be in a handler instead?
#
- name: Update facts
  setup:
  when: not ansible_check_mode
