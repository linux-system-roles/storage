---
#
# Set the list of PV devices.
#
# TODO: Decide on semantics. Playbook PV specs should probably be complete to enable idempotency.
#
- name: Install LVM2 commmands as needed
  package:
    name: lvm2
    state: present
  when: pool.type == "lvm"

- block:
    - name: collect list of current pvs
      command: pvs -o name --noheadings --select 'vg_name={{ pool.name }}'
      register: pvs_cmd
      changed_when: false
      become: true
  rescue:
    - debug:
        msg: "Failed to run pvs"
  when: pool.disks == [] and pool.type == "lvm" and pool.name in ansible_facts.lvm.vgs

- name: Set pvs based on disk set
  set_fact:
    pvs: "{{ pool.disks }}"
  when: pool.type == "lvm" and not use_partitions

- name: Set pv partitions based on disk set
  set_fact:
    pvs: "{{ pool.disks|map('regex_replace', '$', '1')|list }}"
  when: pool.type == "lvm" and use_partitions

- block:
    - name: collect list of current pvs
      command: pvs -o name --noheadings --select 'vg_name={{ pool.name }}'
      register: pvs_cmd
      changed_when: false
      become: true
  rescue:
    - debug:
        msg: "Failed to run pvs"
  when: pool.type == "lvm" and pool.name in ansible_facts.lvm.vgs

- name: Set pvs from current vg
  set_fact:
    pool: "{{ pool|combine({'_orig_members': pvs_cmd.stdout.split()}) }}"
  when: pool.type == "lvm" and pool.name in ansible_facts.lvm.vgs and not pvs_cmd.failed

#
# Configure the VG
#
- block:
    - name: configure vg
      lvg:
        vg: "{{ pool.name }}"
        pvs: "{{ pvs }}"
        state: "{{ pool.state }}"
  rescue:
    - debug:
        msg: "Failed to configure vg"
  when: pool.type == "lvm" and pool.name

- block:
   - name: wipe pvs
     command: wipefs -a {{ pv_path }}
     changed_when: false
     with_items: "{{ pool._orig_members }}"
     loop_control:
       loop_var: pv_path
  rescue:
    - debug:
        msg: "Failed to wipe pv signatures."
  when: pool.type == 'lvm' and pool.state == "absent"

- name: Remove partitions when pool.state is 'absent' and not use_partitions
  include_tasks: "remove-partitions.yml"
  with_items: "{{ pool.disks }}"
  when: pool.state == 'absent' and (use_partitions is undefined or not use_partitions)
