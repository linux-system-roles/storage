---
- name: Set some facts
  set_fact:
    # json_query(...) used instead of "|selectattr('device', 'equalto', storage_test_volume._device)|list"
    # as that expression wouldn't work with Jinja versions <2.8
    storage_test_mount_device_matches: "{{ ansible_mounts|json_query('[?device==`\"{}\"`]'.format(storage_test_volume._device))}}"
    storage_test_mount_point_matches: "{{ ansible_mounts|json_query('[?mount==`\"{}\"`]'.format(storage_test_volume.mount_point))}}"
    storage_test_mount_expected_match_count: "{{ 1 if _storage_test_volume_present and storage_test_volume.mount_point else 0 }}"

#
# Verify mount presence.
#
- name: Verify the current mount state by device
  assert:
    that: "{{ storage_test_mount_device_matches|length == storage_test_mount_expected_match_count|int }}"
    msg: "Found unexpected mount state for volume '{{ storage_test_volume.name }}' device"
  when: _storage_test_volume_present and storage_test_volume.mount_point

#
# Verify mount directory.
#
- name: Verify the current mount state by mount point
  assert:
    that: "{{ storage_test_mount_point_matches|length == storage_test_mount_expected_match_count|int }}"
    msg: "Found unexpected mount state for volume '{{ storage_test_volume.name }}' mount point"

#
# Verify mount fs type.
#
- name: Verify the mount fs type
  assert:
    that: "{{ storage_test_mount_point_matches[0].fstype == storage_test_volume.fs_type }}"
    msg: "Found unexpected mount state for volume '{{ storage_test_volume.name }} fs type"
  when: storage_test_mount_expected_match_count|int == 1

#
# Verify mount options.
#

- name: Clean up variables
  set_fact:
    storage_test_mount_device_matches: null
    storage_test_mount_point_matches: null
    storage_test_mount_expected_match_count: null
