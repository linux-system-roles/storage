---

#
# MDRaid devices paths are returned as a symlinks. But sometimes we need their targets.
#
- name: (1/3) Process device path (set initial value)
  set_fact:
    storage_test_device_path: "{{ storage_test_volume._device }}"

# realpath fails when given empty string; the task then returns completely different dict.
- block:
  - name: (2/3) Process device path (get device file info)
    command: realpath "{{ storage_test_volume._device }}"
    register: storage_test_realpath

  - name: (3/3) Process device path (replace device with its target if it is a symlink)
    set_fact:
      storage_test_device_path: "{{ storage_test_realpath.stdout }}"
    when: storage_test_device_path in storage_test_blkinfo.info

  when: storage_test_volume._device != ""

- name: Set some facts
  set_fact:
    # json_query(...) used instead of "|selectattr('device', 'equalto', storage_test_volume._device)|list"
    # as that expression wouldn't work with Jinja versions <2.8
    storage_test_mount_device_matches: "{{ ansible_mounts|json_query('[?device==`\"{}\"`]'.format(storage_test_device_path))}}"
    storage_test_mount_point_matches: "{{ ansible_mounts|json_query('[?mount==`\"{}\"`]'.format(storage_test_volume.mount_point))}}"
    storage_test_mount_expected_match_count: "{{ 1 if _storage_test_volume_present and storage_test_volume.mount_point else 0 }}"
    storage_test_swap_expected_matches: "{{ 1 if _storage_test_volume_present and storage_test_volume.fs_type == 'swap' else 0 }}"

#
# Verify mount presence.
#
- name: Verify the current mount state by device
  assert:
    that: "{{ storage_test_mount_device_matches|length == storage_test_mount_expected_match_count|int }}"
    msg: "Found unexpected mount state for volume '{{ storage_test_volume.name }}' device"
  when: _storage_test_volume_present and storage_test_volume.mount_point

#
# Verify mount directory.
#
- name: Verify the current mount state by mount point
  assert:
    that: "{{ storage_test_mount_point_matches|length == storage_test_mount_expected_match_count|int }}"
    msg: "Found unexpected mount state for volume '{{ storage_test_volume.name }}' mount point"

#
# Verify mount fs type.
#
- name: Verify the mount fs type
  assert:
    that: "{{ storage_test_mount_point_matches[0].fstype == storage_test_volume.fs_type }}"
    msg: "Found unexpected mount state for volume '{{ storage_test_volume.name }} fs type"
  when: storage_test_mount_expected_match_count|int == 1

#
# Verify swap status.
#
- command: realpath "{{ storage_test_volume._device }}"
  register: storage_test_sys_node
  when: storage_test_volume.fs_type == "swap"

- name: Gather swap info
  command: cat /proc/swaps
  register: storage_test_swaps
  when: storage_test_volume.fs_type == "swap"

- name: Verify swap status
  assert:
    that: "{{ storage_test_swaps.stdout|regex_findall('^' + storage_test_sys_node.stdout + ' ', multiline=True)|list|length|int == storage_test_swap_expected_matches|int }}"
    msg: "Unexpected number of matching active swaps"
  when: storage_test_volume.fs_type == "swap"

#
# Verify mount options.
#

- name: Unset facts
  set_fact:
    storage_test_mount_device_matches: null
    storage_test_mount_point_matches: null
    storage_test_mount_expected_match_count: null
    storage_test_swap_expected_matches: null
    storage_test_sys_node: null
    storage_test_swaps: null
