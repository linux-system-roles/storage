---
- hosts: all
  become: true
  vars:
    mount_location: '/opt/test1'
    testfile: "{{ mount_location }}/quux"

  tasks:
    - include_role:
        name: storage

    - include_tasks: get_unused_disk.yml
      vars:
        min_size: "10g"
        max_return: 1

    - name: Verify that the play fails with the expected error message
      block:
        - name: Create a disk volume mounted at "{{ mount_location }}"
          include_role:
            name: storage
          vars:
            storage_volumes:
              - name: test1
                type: disk
                disks: ['/dev/surelyidonotexist']
                mount_point: "{{ mount_location }}"

        - name: UNREACH
          fail:
            msg: "this should be unreachable"

      rescue:
        - name: Check that we failed in the role
          assert:
            that:
              - ansible_failed_task.name != 'UNREACH'
            msg: "Role has not failed when it should have"
          vars:
            # Ugh! needed to expand ansible_failed_task
            storage_provider: blivet

        # the following does not work properly,
        # blivet_output.failed is false.
        # - name: Show the error output
        #   debug:
        #     msg: "{{ blivet_output.failed }}"

        # - name: Check the error output
        #   assert:
        #     that: blivet_output.failed | bool
        #     msg: "Expected error message not found for missing disk"

    - name: Test for correct handling of duplicate volume names
      block:
        - name: Try to create two volumes w/ the same name
          include_role:
            name: storage
          vars:
            storage_volumes:
              - name: vol1
                type: disk
                disks: "{{ unused_disks }}"
              - name: vol1
                type: disk
                disks: "{{ unused_disks }}"

        - name: UNREACH
          fail:
            msg: "this should be unreachable"

      rescue:
        - name: Check that we failed in the role
          assert:
            that:
              - ansible_failed_task.name != 'UNREACH'
            msg: "Role has not failed when it should have"
          vars:
            # Ugh! needed to expand ansible_failed_task
            storage_provider: blivet

        - name: Verify the output of the duplicate volumes test
          assert:
            that: "blivet_output.failed and
                   'multiple volumes with the same name:' in blivet_output.msg and
                   not blivet_output.changed"
            msg: "Unexpected behavior w/ multiple disk volumes using the same name"

    - name: Create a file system on disk
      include_role:
        name: storage
      vars:
        storage_volumes:
          - name: test1
            type: disk
            fs_type: 'ext4'
            disks: "{{ unused_disks }}"
            mount_point: "{{ mount_location }}"

    - name: create a file
      file:
        path: "{{ testfile }}"
        state: touch

    - name: Test for correct handling of safe_mode
      block:
        - name: Try to replace the file system on disk in safe mode
          include_role:
            name: storage
          vars:
            storage_volumes:
              - name: test1
                type: disk
                fs_type: 'ext3'
                disks: "{{ unused_disks }}"

        - name: UNREACH
          fail:
            msg: "this should be unreachable"

      rescue:
        - name: Check that we failed in the role
          assert:
            that:
              - ansible_failed_task.name != 'UNREACH'
            msg: "Role has not failed when it should have"
          vars:
            # Ugh! needed to expand ansible_failed_task
            storage_provider: blivet

    - name: Verify the output
      assert:
        that: "blivet_output.failed and
               blivet_output.msg|regex_search('cannot remove existing formatting on volume.*in safe mode') and
                  not blivet_output.changed"
        msg: "Unexpected behavior w/ existing data on specified disks"

    - name: Unmount file system
      include_role:
        name: storage
      vars:
        storage_volumes:
          - name: test1
            type: disk
            fs_type: 'ext4'
            disks: "{{ unused_disks }}"
            mount_point: none

    - name: Test for correct handling of safe_mode with unmounted filesystem
      block:
        - name: Try to replace the file system on disk in safe mode
          include_role:
            name: storage
          vars:
            storage_volumes:
              - name: test1
                type: disk
                fs_type: 'ext3'
                disks: "{{ unused_disks }}"

        - name: UNREACH
          fail:
            msg: "this should be unreachable"

      rescue:
        - name: Check that we failed in the role
          assert:
            that:
              - ansible_failed_task.name != 'UNREACH'
            msg: "Role has not failed when it should have"
          vars:
            # Ugh! needed to expand ansible_failed_task
            storage_provider: blivet

    - name: Verify the output
      assert:
        that: "blivet_output.failed and
               blivet_output.msg|regex_search('cannot remove existing formatting on volume.*in safe mode') and
                  not blivet_output.changed"
        msg: "Unexpected behavior w/ existing data on specified disks"

    - name: Remount file system
      include_role:
        name: storage
      vars:
        storage_volumes:
          - name: test1
            type: disk
            fs_type: 'ext4'
            disks: "{{ unused_disks }}"
            mount_point: "{{ mount_location }}"

    - name: stat the file
      stat:
        path: "{{ testfile }}"
      register: stat_r

    - name: assert file presence
      assert:
        that:
          stat_r.stat.isreg is defined and stat_r.stat.isreg
        msg: "data lost!"

    - name: Test for correct handling of safe_mode
      block:
        - name: Try to create a partition pool on the disk already containing a file system in safe_mode
          include_role:
            name: storage
          vars:
            storage_pools:
              - name: foo
                disks: "{{ unused_disks }}"
                type: partition

        - name: UNREACH
          fail:
            msg: "this should be unreachable"

      rescue:
        - name: Check that we failed in the role
          assert:
            that:
              - ansible_failed_task.name != 'UNREACH'
            msg: "Role has not failed when it should have"
          vars:
            # Ugh! needed to expand ansible_failed_task
            storage_provider: blivet

        - name: Verify the output
          assert:
            that: "blivet_output.failed and
                   blivet_output.msg|regex_search('cannot remove existing formatting and/or devices on disk.*in safe mode') and
                   not blivet_output.changed"
            msg: "Unexpected behavior w/ existing data on specified disks"

    - name: Test for correct handling of safe_mode with existing filesystem
      block:
        - name: Try to create LVM pool on disk that already belongs to an existing filesystem
          include_role:
            name: storage
          vars:
            storage_pools:
              - name: foo
                disks: "{{ unused_disks }}"
                type: lvm

        - name: UNREACH
          fail:
            msg: "this should be unreachable"

      rescue:
        - name: Check that we failed in the role
          assert:
            that:
              - ansible_failed_task.name != 'UNREACH'
            msg: "Role has not failed when it should have"
          vars:
            # Ugh! needed to expand ansible_failed_task
            storage_provider: blivet

        - name: Verify the output
          assert:
            that: "{{ blivet_output.failed and
                      blivet_output.msg|regex_search('cannot remove existing formatting and/or devices on disk.*in safe mode') and
                      not blivet_output.changed }}"
            msg: "Unexpected behavior w/ existing data on specified disks"

    - name: stat the file
      stat:
        path: "{{ testfile }}"
      register: stat_r

    - name: assert file presence
      assert:
        that:
          stat_r.stat.isreg is defined and stat_r.stat.isreg
        msg: "data lost!"

    - name: Create a partition pool on the disk already containing a file system w/o safe_mode
      include_role:
        name: storage
      vars:
        storage_safe_mode: false
        storage_pools:
          - name: foo
            disks: "{{ unused_disks }}"
            type: partition

    - name: Verify the output
      assert:
        that: not blivet_output.failed
        msg: "failed to create partition pool over existing file system w/o safe_mode"

    - name: Clean up
      include_role:
        name: storage
      vars:
        storage_safe_mode: false
        storage_pools:
          - name: foo
            type: partition
            disks: "{{ unused_disks }}"
            state: absent
